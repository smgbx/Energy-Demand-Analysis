# -*- coding: utf-8 -*-
"""PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qrVtrnu6Rgkil9GjRBgPJJ_DGKGgWpuP

Part1
1. Import the dataset and create data frames directly on import.
"""

pip install pyspark

import csv
from pyspark.sql import SparkSession
import pyspark.sql.functions as filter
Spark = SparkSession \
    .builder \
    .appName("Spark project") \
    .getOrCreate()
#part1 question 1
df = Spark.read.csv(r"/content/weather_features.csv",header=True)
df.createOrReplaceTempView("Weather")

import csv
from pyspark.sql import SparkSession
import pyspark.sql.functions as filter
Spark = SparkSession \
    .builder \
    .appName("Spark project") \
    .getOrCreate()
#part1 question 1
df = Spark.read.csv(r"/content/energy_dataset.csv",header=True)
df.createOrReplaceTempView("Energy")

Spark.sql("select * from Weather where city_name = 'Madrid' or weather_main = 'clouds'").createTempView("madrid")

Spark.sql("select dt_iso,city_name,temp_max,temp_min from Weather where city_name = 'Madrid' ORDER BY temp_max desc").show()

Spark.sql("select * from Weather where city_name = 'Barcelona' or weather_main = 'clouds'").createTempView("barcelonatable")

Spark.sql("select generation_hydro_water_reservoir,price_actual from Energy ORDER BY generation_hydro_water_reservoir desc").show()

Spark.sql("select * from madrid union select * from barcelonatable order by temp").show(50)

Spark.sql("select city_name,temp,weather_main from Weather order by temp").show(50)

Spark.sql("select * from Weather where weather_description = 'mist'").show()

Spark.sql("select avg(temp) from Weather").show()

Spark.sql("select max(pressure) from Weather").show()

Spark.sql("select forecast_solar_day_ahead,price_day_ahead from Energy ORDER by price_day_ahead").show()



Spark.sql("select distinct(city_name),temp_max,weather_main from weather where weather_main = 'clouds'").show(100)